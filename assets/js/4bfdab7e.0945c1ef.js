"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[998],{6394:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"usage","title":"Usage","description":"This library has 2 important concepts, if you are familiar with React Context this is very similar.","source":"@site/docs/usage.mdx","sourceDirName":".","slug":"/usage","permalink":"/react-native-safe-area-context/docs/usage","draft":false,"unlisted":false,"editUrl":"https://github.com/AppAndFlow/react-native-safe-area-context/tree/main/docs/docs/usage.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Usage","sidebar_label":"Usage"},"sidebar":"docsSidebar","previous":{"title":"Getting started","permalink":"/react-native-safe-area-context/docs/getting-started"},"next":{"title":"API reference","permalink":"/react-native-safe-area-context/docs/category/api-reference"}}');var a=t(4848),n=t(8453);const i={sidebar_position:2,title:"Usage",sidebar_label:"Usage"},o=void 0,c={},d=[{value:"Providers",id:"providers",level:3},{value:"Consumers",id:"consumers",level:3}];function l(e){const s={a:"a",code:"code",h3:"h3",li:"li",p:"p",ul:"ul",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(s.p,{children:["This library has 2 important concepts, if you are familiar with ",(0,a.jsx)(s.a,{href:"https://react.dev/learn/passing-data-deeply-with-context",children:"React Context"})," this is very similar."]}),"\n",(0,a.jsx)(s.h3,{id:"providers",children:"Providers"}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.a,{href:"/docs/api/safe-area-provider",children:"SafeAreaProvider"})," component is a ",(0,a.jsx)(s.code,{children:"View"})," from where insets provided by consumers are relative to. This means that if this view overlaps with any system elements (status bar, notches, etc.) these values will be provided to descendent consumers. Usually you will have one provider at the top of your app."]}),"\n",(0,a.jsx)(s.h3,{id:"consumers",children:"Consumers"}),"\n",(0,a.jsx)(s.p,{children:"Consumers are components and hooks that allow using inset values provided by the nearest parent provider. Values are always relative to a provider and not to these components."}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.a,{href:"/docs/api/safe-area-view",children:"SafeAreaView"})," is the preferred way to consume insets. This is a regular ",(0,a.jsx)(s.code,{children:"View"})," with insets applied as extra padding or margin. It offers better performance by applying insets natively and avoids flickers that can happen with the other JS based consumers."]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.a,{href:"/docs/api/use-safe-area-insets",children:"useSafeAreaInsets"})," offers more flexibility, but can cause some layout flicker in certain cases. Use this if you need more control over how insets are applied."]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>o});var r=t(6540);const a={},n=r.createContext(a);function i(e){const s=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(n.Provider,{value:s},e.children)}}}]);