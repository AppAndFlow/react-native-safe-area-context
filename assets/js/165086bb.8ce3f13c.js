"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[23],{970:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"api/safe-area-listener","title":"SafeAreaListener","description":"Component that lets you listen to safe area insets and frame changes at the position where it is rendered.","source":"@site/docs/api/safe-area-listener.mdx","sourceDirName":"api","slug":"/api/safe-area-listener","permalink":"/react-native-safe-area-context/api/safe-area-listener","draft":false,"unlisted":false,"editUrl":"https://github.com/AppAndFlow/react-native-safe-area-context/tree/main/docs/docs/api/safe-area-listener.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"SafeAreaListener","sidebar_label":"SafeAreaListener"},"sidebar":"docsSidebar","previous":{"title":"SafeAreaProvider","permalink":"/react-native-safe-area-context/api/safe-area-provider"},"next":{"title":"SafeAreaView","permalink":"/react-native-safe-area-context/api/safe-area-view"}}');var r=a(4848),s=a(8453);const i={sidebar_position:2,title:"SafeAreaListener",sidebar_label:"SafeAreaListener"},o=void 0,c={},d=[{value:"Example",id:"example",level:3},{value:"Props",id:"props",level:3},{value:"<code>onChange</code>",id:"onchange",level:4}];function l(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Component that lets you listen to safe area insets and frame changes at the position where it is rendered."}),"\n",(0,r.jsxs)(n.p,{children:["This is an alternative to using the ",(0,r.jsx)(n.code,{children:"useSafeAreaInsets"})," and ",(0,r.jsx)(n.code,{children:"useSafeAreaFrame"})," hooks in combinations with ",(0,r.jsx)(n.code,{children:"SafeAreaProvider"}),". Unlike the hooks, this notifies about changes with the ",(0,r.jsx)(n.code,{children:"onChange"})," prop and doesn't trigger re-renders when the insets or frame change."]}),"\n",(0,r.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { SafeAreaListener } from 'react-native-safe-area-context';\n\nfunction SomeComponent() {\n  return (\n    <SafeAreaListener\n      onChange={({ insets, frame }) => {\n        console.log('Safe area changed:', { insets, frame });\n      }}\n    >\n      {/* Your content here */}\n    </SafeAreaListener>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"props",children:"Props"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts all ",(0,r.jsx)(n.a,{href:"https://reactnative.dev/view#props",children:"View"})," props."]}),"\n",(0,r.jsx)(n.h4,{id:"onchange",children:(0,r.jsx)(n.code,{children:"onChange"})}),"\n",(0,r.jsxs)(n.p,{children:["Required, a function that receives an object with ",(0,r.jsx)(n.code,{children:"insets"})," and ",(0,r.jsx)(n.code,{children:"frame"})," properties. The ",(0,r.jsx)(n.code,{children:"insets"})," property contains the safe area insets, and the ",(0,r.jsx)(n.code,{children:"frame"})," property contains the frame of the component."]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var t=a(6540);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);